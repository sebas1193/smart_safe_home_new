<%- include("partials/header") %>
<%- include("partials/nav_logout") %>

<div class="container mt-5">
  <!-- Breadcrumb Navigation -->
  <nav aria-label="breadcrumb">
    <ol class="breadcrumb">
      <li class="breadcrumb-item"><a href="/admin">Admin Panel</a></li>
      <li class="breadcrumb-item active" aria-current="page">Create New Node</li>
    </ol>
  </nav>

  <div class="row justify-content-center">
    <div class="col-12 col-md-10 col-lg-8">
      <div class="card">
        <div class="card-header bg-primary text-white">
          <h4 class="mb-0">
            <i class="fas fa-plus-circle"></i> Create New Node
          </h4>
        </div>
        <div class="card-body">
          <!-- Current Admin Info -->
          <div class="alert alert-info mb-4">
            <div class="d-flex align-items-center">
              <i class="fas fa-info-circle fa-2x me-3"></i>
              <div>
                <h6 class="alert-heading mb-1">Creating node as:</h6>
                <p class="mb-0">
                  <strong><%= firstName %> <%= lastName %></strong> (@<%= user %>)
                </p>
              </div>
            </div>
          </div>

          <!-- Create Node Form -->
          <form id="createNodeForm">
            <!-- Node ID -->
            <div class="form-group mb-4">
              <label for="id_node" class="form-label">
                <i class="fas fa-microchip"></i> Node ID *
              </label>
              <input 
                type="text" 
                name="id_node" 
                id="id_node" 
                class="form-control" 
                placeholder="e.g., NODE_C, SENSOR_01"
                required>
              <small class="form-text text-muted">Must be unique across all nodes</small>
            </div>

            <!-- Location Dropdown -->
            <div class="form-group mb-4">
              <label for="location" class="form-label">
                <i class="fas fa-map-marker-alt"></i> Location *
              </label>
              <select name="location" id="location" class="form-control" required>
                <option value="">Select a location...</option>
                <option value="front_door">üö™ Front Door</option>
                <option value="living_room">üõãÔ∏è Living Room</option>
                <option value="kitchen">üç≥ Kitchen</option>
                <option value="other">üìç Other</option>
              </select>
              <small class="form-text text-muted">Choose the physical location where this node will be placed</small>
            </div>

            <!-- Description -->
            <div class="form-group mb-4">
              <label for="description" class="form-label">
                <i class="fas fa-align-left"></i> Description (Optional)
              </label>
              <textarea 
                name="description" 
                id="description" 
                class="form-control" 
                rows="3"
                placeholder="Brief description of the node's purpose or functionality..."
                maxlength="200"></textarea>
              <small class="form-text text-muted">Maximum 200 characters</small>
            </div>

            <!-- Node Preview -->
            <div class="alert alert-light mb-4" id="nodePreview" style="display: none;">
              <h6 class="alert-heading">
                <i class="fas fa-eye"></i> Node Preview:
              </h6>
              <div class="row">
                <div class="col-md-6">
                  <strong>ID:</strong> <span id="previewId">-</span><br>
                  <strong>Location:</strong> <span id="previewLocation">-</span>
                </div>
                <div class="col-md-6">
                  <strong>Owner:</strong> <span class="text-muted">Unassigned</span><br>
                  <strong>Description:</strong> <span id="previewDescription">-</span>
                </div>
              </div>
            </div>

            <!-- Action Buttons -->
            <div class="row mt-4">
              <div class="col-12">
                <div class="d-flex justify-content-between">
                  <a href="/admin" class="btn btn-secondary btn-lg">
                    <i class="fas fa-arrow-left"></i> Back to Admin Panel
                  </a>
                  <button type="submit" class="btn btn-primary btn-lg" id="createBtn">
                    <i class="fas fa-plus-circle"></i> Create Node
                  </button>
                </div>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Loading Overlay -->
<div id="loadingOverlay" class="loading-overlay d-none">
  <div class="loading-content">
    <div class="spinner-border text-primary" role="status"></div>
  </div>
</div>

<style>
.card {
  border: 1px solid #dee2e6;
  border-radius: 0.375rem;
  margin-bottom: 1rem;
}

.form-control {
  border: 2px solid #e1e5e9;
  border-radius: 8px;
  padding: 12px;
  font-size: 16px;
  transition: border-color 0.3s ease;
}

.form-control:focus {
  outline: none;
  border-color: #007bff;
  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
}

.form-control.is-valid {
  border-color: #28a745;
}

.form-control.is-invalid {
  border-color: #dc3545;
}

select.form-control {
  cursor: pointer;
}

select.form-control option {
  padding: 10px;
}

textarea.form-control {
  resize: vertical;
  min-height: 80px;
}

.btn {
  padding: 12px 24px;
  border-radius: 8px;
  font-weight: 600;
  transition: all 0.3s ease;
}

.btn:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.loading-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  z-index: 9999;
  display: flex;
  justify-content: center;
  align-items: center;
}

.loading-content {
  background: transparent;
  padding: 1rem;
  text-align: center;
}

.loading-content .spinner-border {
  width: 3rem;
  height: 3rem;
}

.breadcrumb {
  background-color: #f8f9fa;
  border-radius: 0.375rem;
  padding: 0.75rem 1rem;
}

.breadcrumb-item + .breadcrumb-item::before {
  content: ">";
}

.alert {
  border-radius: 8px;
}

.me-3 {
  margin-right: 1rem !important;
}

#nodePreview {
  border-left: 4px solid #007bff;
  background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
}

.character-count {
  font-size: 0.8rem;
  text-align: right;
  margin-top: 5px;
}

@media (max-width: 768px) {
  .d-flex.justify-content-between {
    flex-direction: column;
    gap: 10px;
  }
  
  .btn-lg {
    width: 100%;
  }
}
</style>

<script>
// Variables globales
const currentAdminUsername = '<%= user %>';

// Referencias a elementos
const nodeIdInput = document.getElementById('id_node');
const locationSelect = document.getElementById('location');
const descriptionTextarea = document.getElementById('description');
const nodePreview = document.getElementById('nodePreview');

// Event listener para el formulario
document.getElementById("createNodeForm").addEventListener("submit", async function (e) {
  e.preventDefault();

  const createBtn = document.getElementById('createBtn');
  const loadingOverlay = document.getElementById('loadingOverlay');
  
  // Obtener datos del formulario
  const formData = new FormData(this);
  const nodeData = {
    username: currentAdminUsername,
    id_node: formData.get('id_node'),
    location: formData.get('location'),
    description: formData.get('description') || undefined
  };
  
  // Validaciones b√°sicas
  if (!nodeData.id_node.trim()) {
    alert('Node ID is required');
    return;
  }

  if (!nodeData.location) {
    alert('Please select a location');
    return;
  }
  
  // Mostrar loading
  createBtn.disabled = true;
  createBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Creating...';
  loadingOverlay.classList.remove('d-none');
  
  try {
    // Construir URL con query parameters
    const queryParams = new URLSearchParams(nodeData).toString();
    const response = await fetch(`http://localhost:1880/create_node?${queryParams}`, {
      method: 'POST'
    });
    
    const result = await response.json();
    
    if (result.success) {
      // Mostrar mensaje de √©xito
      alert(`Node created successfully!\n\nID: ${result.data.id_node}\nLocation: ${result.data.location}\nDescription: ${result.data.description || 'None'}`);
      
      // Redirigir al panel de admin
      window.location.href = '/admin';
    } else {
      throw new Error(result.message || 'Error creating node');
    }
  } catch (error) {
    console.error('Create node error:', error);
    alert('Error creating node: ' + error.message);
    
    // Si es un error de autorizaci√≥n, redirigir despu√©s de mostrar error
    if (error.message.includes('Admin privileges') || error.message.includes('Access denied')) {
      setTimeout(() => {
        window.location.href = '/admin';
      }, 2000);
    }
  } finally {
    // Restaurar bot√≥n
    createBtn.disabled = false;
    createBtn.innerHTML = '<i class="fas fa-plus-circle"></i> Create Node';
    loadingOverlay.classList.add('d-none');
  }
});

// Funci√≥n para actualizar preview
function updatePreview() {
  const id = nodeIdInput.value.trim();
  const location = locationSelect.value;
  const description = descriptionTextarea.value.trim();
  
  if (id || location || description) {
    document.getElementById('previewId').textContent = id || '-';
    document.getElementById('previewLocation').textContent = location ? 
      locationSelect.options[locationSelect.selectedIndex].text : '-';
    document.getElementById('previewDescription').textContent = description || 'None';
    nodePreview.style.display = 'block';
  } else {
    nodePreview.style.display = 'none';
  }
}

// Funci√≥n para actualizar contador de caracteres
function updateCharacterCount() {
  const current = descriptionTextarea.value.length;
  const max = 200;
  
  // Buscar o crear contador
  let counter = document.querySelector('.character-count');
  if (!counter) {
    counter = document.createElement('div');
    counter.className = 'character-count text-muted';
    descriptionTextarea.parentNode.appendChild(counter);
  }
  
  counter.textContent = `${current}/${max} characters`;
  
  if (current > max * 0.9) {
    counter.classList.add('text-warning');
    counter.classList.remove('text-muted');
  } else {
    counter.classList.add('text-muted');
    counter.classList.remove('text-warning');
  }
}

// Event listeners para validaci√≥n en tiempo real
document.addEventListener('DOMContentLoaded', function() {
  const form = document.getElementById('createNodeForm');
  const inputs = form.querySelectorAll('input[required], select[required]');
  
  // Validaci√≥n visual en tiempo real
  inputs.forEach(input => {
    input.addEventListener('input', function() {
      if (this.value.trim() === '') {
        this.classList.remove('is-valid');
        this.classList.add('is-invalid');
      } else {
        this.classList.remove('is-invalid');
        this.classList.add('is-valid');
      }
      updatePreview();
    });
    
    input.addEventListener('change', function() {
      if (this.value.trim() === '') {
        this.classList.remove('is-valid');
        this.classList.add('is-invalid');
      } else {
        this.classList.remove('is-invalid');
        this.classList.add('is-valid');
      }
      updatePreview();
    });
  });
  
  // Event listeners espec√≠ficos
  nodeIdInput.addEventListener('input', function() {
    // Convertir a may√∫sculas y remover caracteres especiales
    this.value = this.value.toUpperCase().replace(/[^A-Z0-9_]/g, '');
    updatePreview();
  });
  
  descriptionTextarea.addEventListener('input', function() {
    updateCharacterCount();
    updatePreview();
  });
  
  locationSelect.addEventListener('change', updatePreview);
  
  // Inicializar contador de caracteres
  updateCharacterCount();
});
</script>

<%- include("partials/footer") %>